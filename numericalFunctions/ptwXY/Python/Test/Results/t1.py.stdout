len( f ) = 0
f.allocatedSize( ) = 40
f.overflowAllocatedSize( ) = 10
f.overflowLength( ) = 0
len( f ) = 8
f[2] =  [4.5, -5.0]
f.getValue( 2. ) = 2.07
f.getValue( 5.5 ) = -1.66666666667
f.getValue( 7. ) = 2.88888888889
f.xMin( ) =  1.0
f.xMax( ) =  12.6

printing each element of f
   [1.0, 1.0]
   [3.0, 3.1400000000000001]
   [4.5, -5.0]
   [6.5999999999999996, 2.0]
   [7.5, 4.0]
   [8.5999999999999996, 2.0]
   [11.300000000000001, -5.0]
   [12.6, 3.0]
Returns a string representation of self. This method has three keyword parameters:
pairsPerLine, format and pairSeparator which are defined as,
    pairsPerLine    the number of pairs to put on each line
    format          a valid format to convert an (x,y) pair (i.e., two floats) into a string (e.g. format = ' %.3f %12.5e')
    pairSeparator   a string to put between every pair (e.g, to put a comma to separate pairs use pairSeparator = ',')

printing f
   1.00000000e+00   1.00000000e+00
   3.00000000e+00   3.14000000e+00
   4.50000000e+00  -5.00000000e+00
   6.60000000e+00   2.00000000e+00
   7.50000000e+00   4.00000000e+00
   8.60000000e+00   2.00000000e+00
   1.13000000e+01  -5.00000000e+00
   1.26000000e+01   3.00000000e+00

printing f.toString( pairsPerLine = 3 )
   1.00000000e+00   1.00000000e+00   3.00000000e+00   3.14000000e+00   4.50000000e+00  -5.00000000e+00
   6.60000000e+00   2.00000000e+00   7.50000000e+00   4.00000000e+00   8.60000000e+00   2.00000000e+00
   1.13000000e+01  -5.00000000e+00   1.26000000e+01   3.00000000e+00

printing f.toString( format = " %6.3f %10.3e%%", pairsPerLine = 2, pairSeparator = ',' )
  1.000  1.000e+00%,  3.000  3.140e+00%,
  4.500 -5.000e+00%,  6.600  2.000e+00%,
  7.500  4.000e+00%,  8.600  2.000e+00%,
 11.300 -5.000e+00%, 12.600  3.000e+00%

printing f.toString( format = " %6.3e %10.3E", pairSeparator = ',' )
 1.000e+00  1.000E+00,
 3.000e+00  3.140E+00,
 4.500e+00 -5.000E+00,
 6.600e+00  2.000E+00,
 7.500e+00  4.000E+00,
 8.600e+00  2.000E+00,
 1.130e+01 -5.000E+00,
 1.260e+01  3.000E+00

