#include <stdio.h>
#include "nf_specialFunctions.h"

int main( void ) {

    printf( "Log Factorial Tests\n" );
    printf( "===================\n" );
    printf( "ln(0!) = 0.0 ?= %e\n", nf_amc_log_factorial(0) );
    printf( "ln(1!) = 0.0 ?= %e\n", nf_amc_log_factorial(1) );
    printf( "ln(5!) = 4.787491742782046 ?= %e\n", nf_amc_log_factorial(5) );
    printf( "ln(10!) = 15.104412573075516 ?= %e\n", nf_amc_log_factorial(10) );
    printf( "ln(15!) = 27.89927138384089 ?= %e\n", nf_amc_log_factorial(15) );
    printf( "ln(199!) = 27.89927138384089 ?= %e\n", nf_amc_log_factorial(199) );
    printf("\n");

    printf( "Factorial Tests\n" );
    printf( "===============\n" );
    printf( "0! = 1 ?= %e\n", nf_amc_factorial(0) );
    printf( "1! = 1 ?= %e\n", nf_amc_factorial(1) );
    printf( "5! = 120 ?= %e\n", nf_amc_factorial(5) );
    printf( "10! = 3628800 ?= %e\n", nf_amc_factorial(10) );
    printf( "15! = 1307674368000 ?= %e\n", nf_amc_factorial(15) );
    printf( "199! = 1307674368000 ?= %e\n", nf_amc_factorial(199) );
    printf("\n");

    printf( "Wigner 3j Symbol Tests\n" );
    printf( "======================\n" );
    printf( "Note: arguments to these functions are 2* what you'd think so can use purely ints as arguments\n" );
    printf( "nf_amc_wigner_3j( 0, 0, 0, 0, 0, 0 ) = 1.0 ?= %e\n", nf_amc_wigner_3j( 0, 0, 0, 0, 0, 0 ) );
    /* J = j1 + j2 + j3 == odd, then is zero */
    printf( "nf_amc_wigner_3j( 0, 2, 0, 0, 0, 0 ) = 0.0 ?= %e\n", nf_amc_wigner_3j( 0, 2, 0, 0, 0, 0 ) );
    printf( "nf_amc_wigner_3j( 6, 0, 0, 0, 0, 0 ) = 0.0 ?= %e\n", nf_amc_wigner_3j( 6, 0, 0, 0, 0, 0 ) );
    /* Tougher test value, from Edmonds, pp. 50-51 */
    /* permutation test */
    printf( "nf_amc_wigner_3j( 6, 4, 6, 0, 0, 0 ) = 0.19518001458970666 ?= %e \n", nf_amc_wigner_3j( 6, 4, 6, 0, 0, 0 ) );
    printf( "nf_amc_wigner_3j( 6, 6, 4, 0, 0, 0 ) = 0.19518001458970666 ?= %e \n", nf_amc_wigner_3j( 6, 6, 4, 0, 0, 0 ) );
    printf( "nf_amc_wigner_3j( 4, 6, 6, 0, 0, 0 ) = 0.19518001458970666 ?= %e \n", nf_amc_wigner_3j( 4, 6, 6, 0, 0, 0 ) );
    /* other toughies */
    printf( "nf_amc_wigner_3j( 8, 4, 8, 0, 0, 0 ) = -0.16988239714587516 ?= %e\n", nf_amc_wigner_3j( 8, 4, 8, 0, 0, 0 ) );
    printf( "nf_amc_wigner_3j( 4, 4, 0, 0, 0, 0 ) = 0.4472135954999579 ?= %e\n", nf_amc_wigner_3j( 4, 4, 0, 0, 0, 0 ) );
    printf( "nf_amc_wigner_3j( 4, 0, 4, 0, 0, 0 ) = 0.4472135954999579 ?= %e\n", nf_amc_wigner_3j( 4, 0, 4, 0, 0, 0 ) );
    printf( "nf_amc_wigner_3j( 8, 8, 0, 0, 0, 0 ) = 0.33333333333333333 ?= %e\n", nf_amc_wigner_3j( 8, 8, 0, 0, 0, 0 ) );
    printf( "nf_amc_wigner_3j( 8, 0, 8, 0, 0, 0 ) = 0.33333333333333333 ?= %e\n", nf_amc_wigner_3j( 8, 0, 8, 0, 0, 0 ) );
    printf( "nf_amc_wigner_3j( 8, 8, 0, 4, -4, 0 ) = 0.33333333333333333 ?= %e\n", nf_amc_wigner_3j( 8, 8, 0, 4, -4, 0 ) );
    printf( "nf_amc_wigner_3j( 8, 8, 0, 6, -6, 0 ) = -0.33333333333333333 ?= %e\n", nf_amc_wigner_3j( 8, 8, 0, 6, -6, 0 ) );
    printf("\n");

    printf( "Clebsch-Gordan Coefficient Tests\n" );
    printf( "================================\n" );
    printf( "Note: arguments to these functions are 2* what you'd think so can use purely ints as arguments\n" );
    printf( "Note: CB Coeffs are related to Wigner 3j symbols.  Some of these tests are redundant (by design)\n" );
    printf( "nf_amc_clebsh_gordan( 0, 0, 0, 0, 0 ) = 1.0 ?= %e\n", nf_amc_clebsh_gordan( 0, 0, 0, 0, 0 ) );
    /* J = j1 + j2 + j3 == odd, then is zero */
    printf( "nf_amc_clebsh_gordan( 0, 2, 0, 0, 0 ) = 0.0 ?= %e\n", nf_amc_clebsh_gordan( 0, 2, 0, 0, 0 ) );
    printf( "nf_amc_clebsh_gordan( 6, 0, 0, 0, 0 ) = 0.0 ?= %e\n", nf_amc_clebsh_gordan( 6, 0, 0, 0, 0 ) );
    /* Tougher test value, from Wikipedia: http://en.wikipedia.org/wiki/Table_of_Clebsch%E2%80%93Gordan_coefficients */
    printf( "nf_amc_clebsh_gordan( 4, 1, 4, -1, 3 ) = 0.8944271909999159 ?= %e \n", nf_amc_clebsh_gordan( 4, 1, 4, -1, 3 ) );
    printf( "nf_amc_clebsh_gordan( 4, 1, 0, 1, 5 ) = 0.7745966692414834 ?= %e\n", nf_amc_clebsh_gordan( 4, 1, 0, 1, 5 ) );
    printf( "nf_amc_clebsh_gordan( 4, 4, 0, 0, 0 ) = 0.4472135954999579 ?= %e\n", nf_amc_clebsh_gordan( 4, 4, 0, 0, 0 ) );
    printf( "nf_amc_clebsh_gordan( 4, 0, 0, 0, 4 ) = 1.0 ?= %e\n", nf_amc_clebsh_gordan( 4, 0, 0, 0, 4 ) );
    printf( "nf_amc_clebsh_gordan( 8, 8, 0, 0, 0 ) = 0.33333333333333333 ?= %e\n", nf_amc_clebsh_gordan( 8, 8, 0, 0, 0 ) );
    printf( "nf_amc_clebsh_gordan( 8, 0, 0, 0, 8 ) = 1.0 ?= %e\n", nf_amc_clebsh_gordan( 8, 0, 0, 0, 8 ) );
    printf( "nf_amc_clebsh_gordan( 8, 8, 4, -4, 0 ) = 0.33333333333333333 ?= %e\n", nf_amc_clebsh_gordan( 8, 8, 4, -4, 0 ) );
    printf( "nf_amc_clebsh_gordan( 8, 8, 6, -6, 0 ) = -0.33333333333333333 ?= %e\n", nf_amc_clebsh_gordan( 8, 8, 6, -6, 0 ) );
    printf( "nf_amc_clebsh_gordan( 3, 2, 3, 0, 5 ) = 0.6324555320336759 ?= %e\n", nf_amc_clebsh_gordan( 3, 2, 3, 0, 5 ) );
    printf( "nf_amc_clebsh_gordan( 3, 2, 3, 0, 3 ) = 0.7745966692414834 ?= %e\n", nf_amc_clebsh_gordan( 3, 2, 3, 0, 3 ) );
    printf( "nf_amc_clebsh_gordan( 3, 2, 1, 2, 5 ) = 0.7745966692414834 ?= %e\n", nf_amc_clebsh_gordan( 3, 2, 1, 2, 5 ) );
    printf( "nf_amc_clebsh_gordan( 3, 2, 1, 2, 3 ) = -0.6324555320336759 ?= %e\n", nf_amc_clebsh_gordan( 3, 2, 1, 2, 3 ) );
    printf( "nf_amc_clebsh_gordan( 4, 6, 0, 0, 6 ) = -0.516398 ?= %e\n", nf_amc_clebsh_gordan( 4, 6, 0, 0, 6 ) );
    printf( "nf_amc_clebsh_gordan( 6, 4, 0, 0, 6 ) = -0.516398 ?= %e\n", nf_amc_clebsh_gordan( 6, 4, 0, 0, 6 ) );
    printf("\n");

    printf( "Wigner 6j Symbol Tests\n" );
    printf( "======================\n" );
    printf( "Note: arguments to these functions are 2* what you'd think so can use purely ints as arguments\n" );
    printf( "nf_amc_wigner_6j( 0, 0, 0, 0, 0, 0 ) = 1.0 ?= %e\n", nf_amc_wigner_6j( 0, 0, 0, 0, 0, 0 ) );
    printf( "nf_amc_wigner_6j( 8, 4, 4, 4, 4, 8 ) = 0.111677 ?= %e \n", nf_amc_wigner_6j( 8, 4, 4, 4, 4, 8 ) );
    printf( "nf_amc_wigner_6j( 4, 2, 2, 2, 2, 4 ) = -0.223607 ?= %e \n", nf_amc_wigner_6j( 4, 2, 2, 2, 2, 4 ) );
    printf( "nf_amc_wigner_6j( 4, 4, 2, 2, 2, 4 ) = 0.0745356 ?= %e \n", nf_amc_wigner_6j( 4, 4, 2, 2, 2, 4 ) );
    printf("\n");

    printf( "Wigner 9j Symbol Tests\n" );
    printf( "======================\n" );
    printf( "Note: arguments to these functions are 2* what you'd think so can use purely ints as arguments\n" );
    printf( "nf_amc_wigner_9j( 0, 0, 0, 0, 0, 0, 0, 0, 0 ) = 1.0 ?= %e\n", nf_amc_wigner_9j( 0, 0, 0, 0, 0, 0, 0, 0, 0 ) );
    printf( "nf_amc_wigner_9j( 6, 2, 4, 2, 2, 2, 4, 2, 2 ) = 0.03333333333333333 ?= %e\n", nf_amc_wigner_9j( 6, 2, 4, 2, 2, 2, 4, 2, 2 ) );
/*    printf( "nf_amc_wigner_9j( 3, 1, 2, 1, 1, 1, 2, 1, 1 ) = 0.03333333333333333 ?= %e\n", nf_amc_wigner_9j( 3, 1, 2, 1, 1, 1, 2, 1, 1 ) );*/
    printf("\n");

    printf( "Racah Coefficient Tests\n" );
    printf( "=======================\n" );
    printf( "Note: arguments to these functions are 2* what you'd think so can use purely ints as arguments\n" );
    printf( "Note: Racah Coeffs are related to Wigner 6j symbols.  Some of these tests are redundant (by design)\n" );
    printf( "nf_amc_racah( 0, 0, 0, 0, 0, 0 ) = 1.0 ?= %e\n", nf_amc_racah( 0, 0, 0, 0, 0, 0 ) );
    printf( "nf_amc_racah( 8, 4, 4, 4, 4, 8 ) = 0.111677 ?= %e \n", nf_amc_racah( 8, 4, 4, 4, 4, 8 ) );
    printf( "nf_amc_racah( 4, 2, 2, 2, 2, 4 ) = 0.223607 ?= %e \n", nf_amc_racah( 4, 2, 2, 2, 2, 4 ) );
    printf( "nf_amc_racah( 4, 4, 2, 2, 2, 4 ) = 0.0745356 ?= %e \n", nf_amc_racah( 4, 4, 2, 2, 2, 4 ) );
    printf("\n");

    printf( "Z Coefficient Tests\n" );
    printf( "===================\n" );
    printf( "Note: arguments to these functions are 2* what you'd think so can use purely ints as arguments\n" );
    printf("\n");

    printf( "Reduced Matrix Element Tests\n" );
    printf( "============================\n" );
    printf( "Note: arguments to these functions are 2* what you'd think so can use purely ints as arguments\n" );
    printf("\n");

/*
    double  nf_amc_z_coefficient( int, int, int, int, int, int );

    double  nf_amc_reduced_matrix_element( int, int, int, int, int, int, int );
*/

}